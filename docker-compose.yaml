version: '3.9'

networks:
  polygon:
    external: true

services:

  hardhat:
    build:
      context: ./hardhat
      dockerfile: Dockerfile
    container_name: hardhat
    restart: always
    env_file:
      -  ./envs/hh-env
    ports:
      - "8545:8545"
    volumes:
      - ${PWD}/hardhat/data:/usr/src/app/data
    extra_hosts:
      - 'host.docker.internal:host-gateway'      


  backend:
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: 'backend'
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./envs/bs-backend    #common-blockscout.env
    volumes:
      - ./logs/:/app/logs/
    links:
      - db:database
    environment:
        ETHEREUM_JSONRPC_VARIANT: 'geth'
        ETHEREUM_JSONRPC_WS_URL: ws://host.docker.internal:8545/
        ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545/
        ETHEREUM_JSONRPC_TRACE_URL: http://host.docker.internal:8545/        
        INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: 'true'
    depends_on:
      - db
      - redis_db
      - hardhat
  redis_db:
    image: 'redis:alpine'
    container_name: redis_db
    command: redis-server
    volumes:
      - ./redis-data:/data  

  db-init:
    image: postgres:14
    volumes:
      - ./blockscout-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  db:
    depends_on:
      db-init:
        condition: service_completed_successfully
    image: postgres:14
    user: 2000:2000
    restart: always
    container_name: 'db'
    command: postgres -c 'max_connections=200'
    environment:
        POSTGRES_DB: 'blockscout'
        POSTGRES_USER: 'blockscout'
        POSTGRES_PASSWORD: 'ceWb1MeLBEeOIfk65gU8EjF8'
    ports:
      - 7432:5432
    volumes:
      - ./blockscout-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout -d blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
   

  frontend:
    image: ghcr.io/blockscout/frontend:${FRONTEND_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'frontend'
    env_file:
      -  ./envs/bs-frontend    #common-frontend.env      
    depends_on:
      - backend

  smart-contract-verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:${SMART_CONTRACT_VERIFIER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'smart-contract-verifier'
    env_file:
      -  ./envs/bs-smv     #common-smart-contract-verifier.env

  stats-db-init:
    image: postgres:14
    volumes:
      - ./stats-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  stats-db:
    depends_on:
      stats-db-init:
        condition: service_completed_successfully
    image: postgres:14
    user: 2000:2000
    restart: always
    container_name: 'stats-postgres'
    command: postgres -c 'max_connections=200'
    environment:
        POSTGRES_DB: 'stats'
        POSTGRES_USER: 'stats'
        POSTGRES_PASSWORD: 'n0uejXPl61ci6ldCuE2gQU5Y'
    ports:
      - 7433:5432
    volumes:
      - ./stats-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stats -d stats"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  stats:
    image: ghcr.io/blockscout/stats:${STATS_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'stats'
    depends_on:
      - "stats-db"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./envs/bs-stats    #common-stats.env
    environment:
      - STATS__DB_URL=postgres://stats:n0uejXPl61ci6ldCuE2gQU5Y@stats-db:5432/stats
      - STATS__BLOCKSCOUT_DB_URL=postgresql://blockscout:ceWb1MeLBEeOIfk65gU8EjF8@db:5432/blockscout
      - STATS__CREATE_DATABASE=true
      - STATS__RUN_MIGRATIONS=true

  sig-provider:
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'sig-provider'

  visualizer:
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'visualizer'
    environment:
      -  VISUALIZER__SERVER__GRPC__ENABLED=false
    # env_file:
    #   -  ./envs/common-visualizer.env            

  proxy:
    image: nginx
    container_name: proxy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - "./proxy:/etc/nginx/templates"
    environment:
      BACK_PROXY_PASS: ${BACK_PROXY_PASS:-http://backend:4000}
      FRONT_PROXY_PASS: ${FRONT_PROXY_PASS:-http://frontend:3000}
    ports:
      - 80:80
      - 8080:8080
      - 8081:8081
    depends_on:
      - backend
      - frontend
      - stats